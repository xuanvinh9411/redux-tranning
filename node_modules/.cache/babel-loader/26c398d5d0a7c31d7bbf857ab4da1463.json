{"ast":null,"code":"var _jsxFileName = \"/Users/vinh-lx/Desktop/redux-tranning/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport SearchForm from './components/SearchForm';\nimport ListForm from './components/ListForm'; // import _ from 'lodash';\n\nimport { connect } from 'react-redux';\nimport * as action from './actions/index';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // this.state = {\n    // }\n\n    this.onToggleForm = () => {\n      this.props.onClearForm({\n        id: '',\n        name: '',\n        status: true\n      });\n      this.props.onToggleForm(this.state.task.id);\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      filterStatus = parseInt(filterStatus);\n      this.setState({\n        filter: {\n          name: filterName.toLowerCase(),\n          status: filterStatus\n        }\n      });\n    };\n\n    this.onSearch = keywords => {\n      this.setState({\n        keyword: keywords\n      });\n    };\n\n    this.onSort = (sortBy, sortValue) => {\n      this.setState({\n        sortBy: sortBy,\n        sortValue: sortValue\n      });\n    };\n  } // componentWillMount() {\n  //     // if (localStorage && localStorage.getItem('tasks')) {\n  //     //     var tasks = JSON.parse(localStorage.getItem('tasks'));\n  //     //     this.setState({\n  //     //         tasks: tasks\n  //     //     });\n  //     // }\n  // }\n  // addForm = () => {\n  //     if (this.state.isDisplayForm && this.state.tasksEditing !== null) {\n  //         this.setState({\n  //             isDisplayForm: true,\n  //             tasksEditing: null\n  //         })\n  //     }\n  //     else {\n  //         this.setState({\n  //             isDisplayForm: !this.state.isDisplayForm,\n  //             tasksEditing: null\n  //         })\n  //     }\n  // }\n  // closeForm = () => {\n  //     this.setState({\n  //         isDisplayForm: !this.state.isDisplayForm\n  //     })\n  // }\n  // showForm = () => {\n  //     this.setState({\n  //         isDisplayForm: true\n  //     })\n  // }\n\n\n  render() {\n    // var {\n    //     // tasks,\n    //     // tasksEditing,\n    //     // filter,\n    //     // keyword,\n    //     sortBy,\n    //     sortValue\n    // }\n    //     = this.state;\n    var isDisplayForm = this.props.isDisplayForm; // if (filter) {\n    //     if (filter.name) {\n    //         tasks = tasks.filter(task => {\n    //             return task.name.toLowerCase().indexOf(filter.name) !== -1;\n    //         });\n    //     }\n    //     tasks = tasks.filter(task => {\n    //         if (filter.status == -1) {\n    //             return task\n    //         } else {\n    //             return task.status === (filter.status === 1 ? true : false)\n    //         }\n    //     })\n    // }\n    // if (keyword && keyword !== \"\") {\n    //     // tasks = tasks.filter(task => {\n    //     //     return task.name.indexOf(keyword.keyword) !== -1;\n    //     // });\n    //     tasks = _.filter(tasks,(task) =>{\n    //         return task.name.toLowerCase().indexOf(keyword.keyword.toLowerCase()) !== -1\n    //         })\n    // }\n    // if (sortBy === 'name'){\n    //     tasks = tasks.sort((a,b) =>{\n    //         if(a.name > b.name) return sortValue ;\n    //         else if(a.name < b.name) return -sortValue ;\n    //         else return 0 ;\n    //     })\n    // }else{\n    //     tasks = tasks.sort((a,b) =>{\n    //         if(a.status > b.status) return -sortValue ;\n    //         else if(a.status < b.status) return sortValue ;\n    //         else return 0 ;\n    //     })\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Qu\\u1EA3n L\\xFD C\\xF4ng Vi\\u1EC7c\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-plus mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), \"Th\\xEAm C\\xF4ng Vi\\u1EC7c\"), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(SearchForm // onSearch={this.onSearch}\n    // onSort={this.onSort}\n    // sortBy={sortBy}\n    // sortValue={sortValue}\n    , {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(ListForm // tasks={tasks}\n    // onUpdate={this.onUpdate}\n    // onFilter={this.onFilter}\n    , {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: id => {\n      dispatch(action.toggleform(id));\n    },\n    onClearForm: task => {\n      dispatch(action.edititem(task));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/vinh-lx/Desktop/redux-tranning/src/App.js"],"names":["React","TaskForm","SearchForm","ListForm","connect","action","App","Component","constructor","props","onToggleForm","onClearForm","id","name","status","state","task","onFilter","filterName","filterStatus","parseInt","setState","filter","toLowerCase","onSearch","keywords","keyword","onSort","sortBy","sortValue","render","isDisplayForm","mapStateToProps","mapDispatchToProps","dispatch","toggleform","edititem"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport SearchForm from './components/SearchForm';\nimport ListForm from './components/ListForm';\n// import _ from 'lodash';\nimport { connect } from 'react-redux'\nimport * as action from './actions/index'\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        // this.state = {\n        // }\n    }\n    // componentWillMount() {\n    //     // if (localStorage && localStorage.getItem('tasks')) {\n    //     //     var tasks = JSON.parse(localStorage.getItem('tasks'));\n    //     //     this.setState({\n    //     //         tasks: tasks\n    //     //     });\n    //     // }\n    // }\n    // addForm = () => {\n    //     if (this.state.isDisplayForm && this.state.tasksEditing !== null) {\n    //         this.setState({\n    //             isDisplayForm: true,\n    //             tasksEditing: null\n    //         })\n    //     }\n    //     else {\n    //         this.setState({\n    //             isDisplayForm: !this.state.isDisplayForm,\n    //             tasksEditing: null\n    //         })\n    //     }\n\n    // }\n\n    // closeForm = () => {\n    //     this.setState({\n    //         isDisplayForm: !this.state.isDisplayForm\n    //     })\n    // }\n\n    // showForm = () => {\n    //     this.setState({\n    //         isDisplayForm: true\n    //     })\n    // }\n\n\n    onToggleForm = () => {\n        this.props.onClearForm({ \n            id: '',\n            name: '',\n            status: true\n        })\n        this.props.onToggleForm(this.state.task.id)\n\n    }\n\n    onFilter = (filterName, filterStatus) => {\n        filterStatus = parseInt(filterStatus)\n        this.setState({\n            filter: {\n                name: filterName.toLowerCase(),\n                status: filterStatus\n            }\n        })\n    }\n\n    onSearch = (keywords) => {\n        this.setState({\n            keyword: keywords\n        })\n    }\n    onSort = (sortBy, sortValue) => {\n        this.setState({\n            sortBy: sortBy,\n            sortValue: sortValue\n        })\n    }\n\n    render() {\n        // var {\n        //     // tasks,\n        //     // tasksEditing,\n        //     // filter,\n        //     // keyword,\n        //     sortBy,\n        //     sortValue\n        // }\n        //     = this.state;\n        var { isDisplayForm } = this.props;\n        // if (filter) {\n        //     if (filter.name) {\n        //         tasks = tasks.filter(task => {\n        //             return task.name.toLowerCase().indexOf(filter.name) !== -1;\n        //         });\n\n        //     }\n        //     tasks = tasks.filter(task => {\n        //         if (filter.status == -1) {\n        //             return task\n        //         } else {\n        //             return task.status === (filter.status === 1 ? true : false)\n        //         }\n        //     })\n        // }\n        // if (keyword && keyword !== \"\") {\n        //     // tasks = tasks.filter(task => {\n        //     //     return task.name.indexOf(keyword.keyword) !== -1;\n        //     // });\n        //     tasks = _.filter(tasks,(task) =>{\n        //         return task.name.toLowerCase().indexOf(keyword.keyword.toLowerCase()) !== -1\n        //         })\n        // }\n\n        // if (sortBy === 'name'){\n        //     tasks = tasks.sort((a,b) =>{\n        //         if(a.name > b.name) return sortValue ;\n        //         else if(a.name < b.name) return -sortValue ;\n        //         else return 0 ;\n        //     })\n        // }else{\n        //     tasks = tasks.sort((a,b) =>{\n        //         if(a.status > b.status) return -sortValue ;\n        //         else if(a.status < b.status) return sortValue ;\n        //         else return 0 ;\n        //     })\n        // }\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr />\n                </div>\n                <div className=\"row\">\n                    <div className={isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : ''}>\n                        <TaskForm />\n                    </div>\n                    <div className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={this.onToggleForm}\n                        >\n                            <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                        </button>\n                        <div className=\"row mt-15\">\n                            <SearchForm\n                                // onSearch={this.onSearch}\n                                // onSort={this.onSort}\n                                // sortBy={sortBy}\n                                // sortValue={sortValue}\n                            />\n                        </div>\n                        <div className=\"row mt-15\">\n                            <ListForm\n                                // tasks={tasks}\n                                // onUpdate={this.onUpdate}\n                                // onFilter={this.onFilter}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm\n    };\n}\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onToggleForm: (id) => {\n            dispatch(action.toggleform(id))\n        },\n        onClearForm : (task) =>{\n            dispatch(action.edititem(task))\n        }\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}