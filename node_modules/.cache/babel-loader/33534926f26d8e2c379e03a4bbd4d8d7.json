{"ast":null,"code":"var _jsxFileName = \"/Users/vinh-lx/Desktop/redux-tranning/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport SearchForm from './components/SearchForm';\nimport ListForm from './components/ListForm';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport * as Action from './actions/index';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addForm = () => {\n      if (this.state.isDisplayForm && this.state.tasksEditing !== null) {\n        this.setState({\n          isDisplayForm: true,\n          tasksEditing: null\n        });\n      } else {\n        this.setState({\n          isDisplayForm: !this.state.isDisplayForm,\n          tasksEditing: null\n        });\n      }\n    };\n\n    this.closeForm = () => {\n      this.setState({\n        isDisplayForm: !this.state.isDisplayForm\n      });\n    };\n\n    this.showForm = () => {\n      this.setState({\n        isDisplayForm: true\n      });\n    };\n\n    this.onToggleForm = () => {\n      this.props.onToggleForm();\n    };\n\n    this.onDelete = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n\n      if (index !== -1) {\n        tasks.splice(index, 1);\n        this.setState({\n          tasks: tasks\n        });\n      }\n\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      this.closeForm();\n    };\n\n    this.onUpdate = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n      var tasksEditing = tasks[index];\n      this.setState({\n        tasksEditing: tasksEditing\n      });\n      this.showForm();\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      filterStatus = parseInt(filterStatus);\n      this.setState({\n        filter: {\n          name: filterName.toLowerCase(),\n          status: filterStatus\n        }\n      });\n    };\n\n    this.onSearch = keywords => {\n      this.setState({\n        keyword: keywords\n      });\n    };\n\n    this.onSort = (sortBy, sortValue) => {\n      this.setState({\n        sortBy: sortBy,\n        sortValue: sortValue\n      });\n    };\n\n    this.state = {//     tasks: [\n      //     ],\n      //     tasksEditing: [\n      //     ],\n      //     ,\n      //     filter: {\n      //         name: '',\n      //         status: -1\n      //     }\n      //     ,\n      //     keyword: '',\n      //     sortBy: 'name',\n      //     sortValue: 1\n    };\n  }\n\n  componentWillMount() {\n    if (localStorage && localStorage.getItem('tasks')) {\n      var tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      });\n    }\n  }\n\n  render() {\n    var _this$state = this.state,\n        tasksEditing = _this$state.tasksEditing,\n        filter = _this$state.filter,\n        keyword = _this$state.keyword,\n        sortBy = _this$state.sortBy,\n        sortValue = _this$state.sortValue;\n    var isDisplayForm = this.props.isDisplayForm; // if (filter) {\n    //     if (filter.name) {\n    //         tasks = tasks.filter(task => {\n    //             return task.name.toLowerCase().indexOf(filter.name) !== -1;\n    //         });\n    //     }\n    //     tasks = tasks.filter(task => {\n    //         if (filter.status == -1) {\n    //             return task\n    //         } else {\n    //             return task.status === (filter.status === 1 ? true : false)\n    //         }\n    //     })\n    // }\n    // if (keyword && keyword !== \"\") {\n    //     // tasks = tasks.filter(task => {\n    //     //     return task.name.indexOf(keyword.keyword) !== -1;\n    //     // });\n    //     tasks = _.filter(tasks,(task) =>{\n    //         return task.name.toLowerCase().indexOf(keyword.keyword.toLowerCase()) !== -1\n    //         })\n    // }\n    // if (sortBy === 'name'){\n    //     tasks = tasks.sort((a,b) =>{\n    //         if(a.name > b.name) return sortValue ;\n    //         else if(a.name < b.name) return -sortValue ;\n    //         else return 0 ;\n    //     })\n    // }else{\n    //     tasks = tasks.sort((a,b) =>{\n    //         if(a.status > b.status) return -sortValue ;\n    //         else if(a.status < b.status) return sortValue ;\n    //         else return 0 ;\n    //     })\n    // }\n\n    var elmTaskForm = isDisplayForm ? React.createElement(TaskForm, {\n      onSubmit: this.onSubmit,\n      task: tasksEditing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }) : '';\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Qu\\u1EA3n L\\xFD C\\xF4ng Vi\\u1EC7c\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, elmTaskForm), React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-plus mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), \"Th\\xEAm C\\xF4ng Vi\\u1EC7c\"), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(SearchForm, {\n      onSearch: this.onSearch,\n      onSort: this.onSort,\n      sortBy: sortBy,\n      sortValue: sortValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(ListForm // tasks={tasks}\n    , {\n      onDelete: this.onDelete,\n      onUpdate: this.onUpdate,\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(Action.toggleform());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/vinh-lx/Desktop/redux-tranning/src/App.js"],"names":["React","TaskForm","SearchForm","ListForm","_","connect","Action","App","Component","constructor","props","addForm","state","isDisplayForm","tasksEditing","setState","closeForm","showForm","onToggleForm","onDelete","id","tasks","index","findIndex","splice","localStorage","setItem","JSON","stringify","onUpdate","onFilter","filterName","filterStatus","parseInt","filter","name","toLowerCase","status","onSearch","keywords","keyword","onSort","sortBy","sortValue","componentWillMount","getItem","parse","render","elmTaskForm","onSubmit","mapStateToProps","mapDispatchToProps","dispatch","toggleform"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;;AAEA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAE9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA4BnBC,OA5BmB,GA4BT,MAAM;AACZ,UAAI,KAAKC,KAAL,CAAWC,aAAX,IAA4B,KAAKD,KAAL,CAAWE,YAAX,KAA4B,IAA5D,EAAkE;AAC9D,aAAKC,QAAL,CAAc;AACVF,UAAAA,aAAa,EAAE,IADL;AAEVC,UAAAA,YAAY,EAAE;AAFJ,SAAd;AAIH,OALD,MAMK;AACD,aAAKC,QAAL,CAAc;AACVF,UAAAA,aAAa,EAAE,CAAC,KAAKD,KAAL,CAAWC,aADjB;AAEVC,UAAAA,YAAY,EAAE;AAFJ,SAAd;AAIH;AAEJ,KA1CkB;;AAAA,SA4CnBE,SA5CmB,GA4CP,MAAM;AACd,WAAKD,QAAL,CAAc;AACVF,QAAAA,aAAa,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADjB,OAAd;AAGH,KAhDkB;;AAAA,SAkDnBI,QAlDmB,GAkDR,MAAM;AACb,WAAKF,QAAL,CAAc;AACVF,QAAAA,aAAa,EAAE;AADL,OAAd;AAGH,KAtDkB;;AAAA,SAyDnBK,YAzDmB,GAyDJ,MAAK;AAChB,WAAKR,KAAL,CAAWQ,YAAX;AACH,KA3DkB;;AAAA,SA6EnBC,QA7EmB,GA6EPC,EAAD,IAAQ;AAAA,UACTC,KADS,GACC,KAAKT,KADN,CACTS,KADS;AAEf,UAAIC,KAAK,GAAG,KAAKC,SAAL,CAAeH,EAAf,CAAZ;;AACA,UAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,QAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACA,aAAKP,QAAL,CAAc;AACVM,UAAAA,KAAK,EAAEA;AADG,SAAd;AAGH;;AACDI,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeP,KAAf,CAA9B;AACA,WAAKL,SAAL;AACH,KAxFkB;;AAAA,SA0FnBa,QA1FmB,GA0FPT,EAAD,IAAQ;AAAA,UACTC,KADS,GACC,KAAKT,KADN,CACTS,KADS;AAEf,UAAIC,KAAK,GAAG,KAAKC,SAAL,CAAeH,EAAf,CAAZ;AACA,UAAIN,YAAY,GAAGO,KAAK,CAACC,KAAD,CAAxB;AACA,WAAKP,QAAL,CAAc;AACVD,QAAAA,YAAY,EAAEA;AADJ,OAAd;AAGA,WAAKG,QAAL;AACH,KAlGkB;;AAAA,SAoGnBa,QApGmB,GAoGR,CAACC,UAAD,EAAaC,YAAb,KAA8B;AACrCA,MAAAA,YAAY,GAAGC,QAAQ,CAACD,YAAD,CAAvB;AACA,WAAKjB,QAAL,CAAc;AACVmB,QAAAA,MAAM,EAAE;AACJC,UAAAA,IAAI,EAAEJ,UAAU,CAACK,WAAX,EADF;AAEJC,UAAAA,MAAM,EAAEL;AAFJ;AADE,OAAd;AAMH,KA5GkB;;AAAA,SA8GnBM,QA9GmB,GA8GPC,QAAD,IAAc;AACrB,WAAKxB,QAAL,CAAc;AACVyB,QAAAA,OAAO,EAAED;AADC,OAAd;AAGH,KAlHkB;;AAAA,SAmHnBE,MAnHmB,GAmHV,CAACC,MAAD,EAASC,SAAT,KAAuB;AAC5B,WAAK5B,QAAL,CAAc;AACV2B,QAAAA,MAAM,EAAEA,MADE;AAEVC,QAAAA,SAAS,EAAEA;AAFD,OAAd;AAIH,KAxHkB;;AAEf,SAAK/B,KAAL,GAAa,CACT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAfS,KAAb;AAiBH;;AACDgC,EAAAA,kBAAkB,GAAG;AACjB,QAAInB,YAAY,IAAIA,YAAY,CAACoB,OAAb,CAAqB,OAArB,CAApB,EAAmD;AAC/C,UAAIxB,KAAK,GAAGM,IAAI,CAACmB,KAAL,CAAWrB,YAAY,CAACoB,OAAb,CAAqB,OAArB,CAAX,CAAZ;AACA,WAAK9B,QAAL,CAAc;AACVM,QAAAA,KAAK,EAAEA;AADG,OAAd;AAGH;AACJ;;AA+FD0B,EAAAA,MAAM,GAAG;AAAA,sBASC,KAAKnC,KATN;AAAA,QAGDE,YAHC,eAGDA,YAHC;AAAA,QAIDoB,MAJC,eAIDA,MAJC;AAAA,QAKDM,OALC,eAKDA,OALC;AAAA,QAMDE,MANC,eAMDA,MANC;AAAA,QAODC,SAPC,eAODA,SAPC;AAAA,QAUC9B,aAVD,GAUmB,KAAKH,KAVxB,CAUCG,aAVD,EAWL;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAImC,WAAW,GAAGnC,aAAa,GACzB,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAE,KAAKoC,QADjB;AAEE,MAAA,IAAI,EAAEnC,YAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADyB,GAKzB,EALN;AAMA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAKI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAED,aAAa,GAAG,qCAAH,GAA2C,EAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKmC,WADL,CADJ,EAII;AAAK,MAAA,SAAS,EAAEnC,aAAa,GAAG,qCAAH,GAA2C,yCAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,SAAS,EAAC,iBAFd;AAGI,MAAA,OAAO,EAAE,KAAKK,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,8BADJ,EAQI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE,KAAKoB,QADnB;AAEI,MAAA,MAAM,EAAE,KAAKG,MAFjB;AAGI,MAAA,MAAM,EAAEC,MAHZ;AAII,MAAA,SAAS,EAAEC,SAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CARJ,EAgBI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD,CACI;AADJ;AAEI,MAAA,QAAQ,EAAE,KAAKxB,QAFnB;AAGI,MAAA,QAAQ,EAAE,KAAKU,QAHnB;AAII,MAAA,QAAQ,EAAE,KAAKC,QAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAhBJ,CAJJ,CALJ,CADJ;AAsCH;;AAxN6B;;AA2NlC,MAAMoB,eAAe,GAAGtC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,aAAa,EAAED,KAAK,CAACC;AADlB,GAAP;AAGH,CAJD;;AAKA,MAAMsC,kBAAkB,GAAG,CAACC,QAAD,EAAW1C,KAAX,KAAqB;AAC5C,SAAO;AACHQ,IAAAA,YAAY,EAAE,MAAM;AAChBkC,MAAAA,QAAQ,CAAC9C,MAAM,CAAC+C,UAAP,EAAD,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AAOA,eAAehD,OAAO,CAAC6C,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C5C,GAA7C,CAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport SearchForm from './components/SearchForm';\nimport ListForm from './components/ListForm';\nimport _ from 'lodash';\nimport { connect } from 'react-redux'\nimport * as Action from './actions/index'\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //     tasks: [\n\n            //     ],\n            //     tasksEditing: [\n            //     ],\n            //     ,\n            //     filter: {\n            //         name: '',\n            //         status: -1\n\n            //     }\n            //     ,\n            //     keyword: '',\n            //     sortBy: 'name',\n            //     sortValue: 1\n        }\n    }\n    componentWillMount() {\n        if (localStorage && localStorage.getItem('tasks')) {\n            var tasks = JSON.parse(localStorage.getItem('tasks'));\n            this.setState({\n                tasks: tasks\n            });\n        }\n    }\n    addForm = () => {\n        if (this.state.isDisplayForm && this.state.tasksEditing !== null) {\n            this.setState({\n                isDisplayForm: true,\n                tasksEditing: null\n            })\n        }\n        else {\n            this.setState({\n                isDisplayForm: !this.state.isDisplayForm,\n                tasksEditing: null\n            })\n        }\n\n    }\n\n    closeForm = () => {\n        this.setState({\n            isDisplayForm: !this.state.isDisplayForm\n        })\n    }\n\n    showForm = () => {\n        this.setState({\n            isDisplayForm: true\n        })\n    }\n\n\n    onToggleForm = () =>{\n        this.props.onToggleForm()\n    }\n\n    // onUpdateStatus = (id) => {\n    //     var { tasks } = this.state;\n    //     var index = _.findIndex(tasks, (task) => {\n    //         return task.id === id;\n    //     });\n    //     // var index1 = this.findIndex(id);\n    //     if (index !== -1) {\n    //         tasks[index].status = !tasks[index].status\n    //         this.setState({\n    //             tasks: tasks\n    //         })\n    //     }\n    //     localStorage.setItem('tasks', JSON.stringify(tasks));\n\n    // }\n\n    onDelete = (id) => {\n        var { tasks } = this.state;\n        var index = this.findIndex(id);\n        if (index !== -1) {\n            tasks.splice(index, 1);\n            this.setState({\n                tasks: tasks\n            })\n        }\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n        this.closeForm()\n    }\n\n    onUpdate = (id) => {\n        var { tasks } = this.state\n        var index = this.findIndex(id);\n        var tasksEditing = tasks[index]\n        this.setState({\n            tasksEditing: tasksEditing\n        })\n        this.showForm();\n    }\n\n    onFilter = (filterName, filterStatus) => {\n        filterStatus = parseInt(filterStatus)\n        this.setState({\n            filter: {\n                name: filterName.toLowerCase(),\n                status: filterStatus\n            }\n        })\n    }\n\n    onSearch = (keywords) => {\n        this.setState({\n            keyword: keywords\n        })\n    }\n    onSort = (sortBy, sortValue) => {\n        this.setState({\n            sortBy: sortBy,\n            sortValue: sortValue\n        })\n    }\n\n    render() {\n        var {\n            // tasks,\n            tasksEditing,\n            filter,\n            keyword,\n            sortBy,\n            sortValue\n        }\n            = this.state;\n        var { isDisplayForm } = this.props;\n        // if (filter) {\n        //     if (filter.name) {\n        //         tasks = tasks.filter(task => {\n        //             return task.name.toLowerCase().indexOf(filter.name) !== -1;\n        //         });\n\n        //     }\n        //     tasks = tasks.filter(task => {\n        //         if (filter.status == -1) {\n        //             return task\n        //         } else {\n        //             return task.status === (filter.status === 1 ? true : false)\n        //         }\n        //     })\n        // }\n        // if (keyword && keyword !== \"\") {\n        //     // tasks = tasks.filter(task => {\n        //     //     return task.name.indexOf(keyword.keyword) !== -1;\n        //     // });\n        //     tasks = _.filter(tasks,(task) =>{\n        //         return task.name.toLowerCase().indexOf(keyword.keyword.toLowerCase()) !== -1\n        //         })\n        // }\n\n        // if (sortBy === 'name'){\n        //     tasks = tasks.sort((a,b) =>{\n        //         if(a.name > b.name) return sortValue ;\n        //         else if(a.name < b.name) return -sortValue ;\n        //         else return 0 ;\n        //     })\n        // }else{\n        //     tasks = tasks.sort((a,b) =>{\n        //         if(a.status > b.status) return -sortValue ;\n        //         else if(a.status < b.status) return sortValue ;\n        //         else return 0 ;\n        //     })\n        // }\n        var elmTaskForm = isDisplayForm\n            ? <TaskForm\n                onSubmit={this.onSubmit}\n                task={tasksEditing}\n            />\n            : '';\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr />\n                </div>\n                <div className=\"row\">\n                    <div className={isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : ''}>\n                        {elmTaskForm}\n                    </div>\n                    <div className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={this.onToggleForm}\n                        >\n                            <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                        </button>\n                        <div className=\"row mt-15\">\n                            <SearchForm\n                                onSearch={this.onSearch}\n                                onSort={this.onSort}\n                                sortBy={sortBy}\n                                sortValue={sortValue}\n                            />\n                        </div>\n                        <div className=\"row mt-15\">\n                            <ListForm\n                                // tasks={tasks}\n                                onDelete={this.onDelete}\n                                onUpdate={this.onUpdate}\n                                onFilter={this.onFilter}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm\n    };\n}\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onToggleForm: () => {\n            dispatch(Action.toggleform())\n        }\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}