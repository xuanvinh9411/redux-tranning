{"ast":null,"code":"import * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar randomID = () => {\n  return s4() + s4() + '_' + s4() + '_';\n};\n\nvar findIndex = (tasks, id) => {\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar Data = JSON.parse(localStorage.getItem('task'));\nvar initalState = Data ? Data : [];\nvar id = '';\nvar index = '';\nexport var tasks = (state = initalState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      console.log(typeof action.task.status, action.task.status);\n      var task = {\n        id: '',\n        name: '',\n        status: action.task.status === 'true' ? true : false\n      };\n\n      if (action.task.id) {\n        id = action.id;\n        index = findIndex(state, id);\n        task = {\n          id: action.task.id,\n          name: action.task.name,\n          status: action.task.status === 'true' ? true : false\n        };\n        state[index] = task;\n      } else {\n        task = {\n          id: randomID(),\n          name: action.task.name,\n          status: action.task.status === 'true' ? true : false\n        };\n        state.push(task);\n      }\n\n      localStorage.setItem('task', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS:\n      id = action.id;\n      index = findIndex(state, id);\n      state[index].status = !state[index].status;\n      localStorage.setItem('task', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      id = action.id;\n      index = findIndex(state, id);\n      state.splice([index], 1);\n      localStorage.setItem('task', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/vinh-lx/Desktop/redux-tranning/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","tasks","id","result","forEach","task","index","Data","JSON","parse","localStorage","getItem","initalState","state","action","type","LIST_ALL","SAVE_TASK","console","log","status","name","push","setItem","stringify","UPDATE_STATUS","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["import * as types from './../constants/ActionTypes'\n\nvar s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\nvar randomID = () => {\n    return s4() + s4() + '_' + s4() + '_';\n}\n\nvar findIndex = (tasks, id) => {\n    var result = -1;\n    tasks.forEach((task, index) => {\n        if (task.id === id) {\n            result = index;\n        }\n    });\n    return result;\n};\n\nvar Data = JSON.parse(localStorage.getItem('task'));\nvar initalState = Data ? Data : [];\nvar id = '';\nvar index = '';\n\nexport var tasks = (state = initalState, action) => {\n    switch (action.type) {\n        case types.LIST_ALL:\n            return state;\n        case types.SAVE_TASK:\n            console.log(typeof action.task.status,action.task.status)\n            var task = {\n                id: '',\n                name: '',\n                status: action.task.status === 'true' ? true : false\n            }\n            if (action.task.id) {\n                id = action.id\n                index = findIndex(state, id)\n                task = {\n                    id: action.task.id,\n                    name: action.task.name,\n                    status: action.task.status === 'true' ? true : false\n                }\n                state[index] = task;\n            } else {\n                task = {\n                    id: randomID(),\n                    name: action.task.name,\n                    status: action.task.status === 'true' ? true : false\n                }\n            state.push(task);\n            }\n            localStorage.setItem('task', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS:\n            id = action.id\n            index = findIndex(state, id)\n            state[index].status = !state[index].status\n            localStorage.setItem('task', JSON.stringify(state));\n            return [...state]\n        case types.DELETE_TASK:\n            id = action.id\n            index = findIndex(state, id)\n            state.splice([index], 1)\n            localStorage.setItem('task', JSON.stringify(state));\n            return [...state]\n        default: return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}