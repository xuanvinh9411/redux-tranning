{"ast":null,"code":"var _jsxFileName = \"/Users/vinh-lx/Desktop/redux-tranning/src/components/TaskForm.js\";\nimport React from 'react';\nimport * as action from './../actions/index';\nimport { connect } from 'react-redux';\n\nclass TaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeForm = () => {\n      this.props.onCloseForm();\n    };\n\n    this.onChange = event => {\n      var target = event.target;\n      var name = target.name;\n      var value = target.value;\n\n      if (name === 'status') {\n        value = target.value === \"true\" ? true : false;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault();\n      this.props.onAddTask(this.state);\n      this.onClear();\n      this.closeForm();\n    };\n\n    this.onClear = () => {\n      this.setState({\n        name: '',\n        status: false\n      });\n    };\n\n    this.state = {\n      id: '',\n      name: '',\n      status: false\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.task) {\n      this.setState({\n        id: this.props.task.id,\n        name: this.props.task.name,\n        status: this.props.task.status\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps && nextProps.task) {\n      this.setState({\n        id: nextProps.task.id,\n        name: nextProps.task.name,\n        status: nextProps.task.status\n      });\n    } else if (nextProps && nextProps.task === null) {\n      this.setState({\n        id: '',\n        name: '',\n        status: false\n      });\n    }\n  }\n\n  render() {\n    var id = this.state.id;\n    if (!this.props.isDisplayForm) return '';\n    return React.createElement(\"div\", {\n      className: \"panel panel-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel-title cus-head-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, id === null || id === '' ? 'Thêm Công Việc' : '\bCập nhật công việc '), React.createElement(\"div\", {\n      className: \"fa fa-times-circle text-right cus-icon-left\",\n      onClick: this.closeForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"panel-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"T\\xEAn :\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"name\",\n      value: this.state.name,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Tr\\u1EA1ng Th\\xE1i :\"), React.createElement(\"select\", {\n      className: \"form-control\",\n      required: \"required\",\n      name: \"status\",\n      value: this.state.status,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"K\\xEDch Ho\\u1EA1t\"), React.createElement(\"option\", {\n      value: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"\\u1EA8n\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Th\\xEAm\"), \"\\xA0\", React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.onClear,\n      className: \"btn btn-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"H\\u1EE7y B\\u1ECF\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.tasks,\n    isDisplayForm: state.isDisplayForm\n  };\n};\n\nconst mapDispatchToprops = (dispatch, props) => {\n  return {\n    onAddTask: task => {\n      dispatch(action.addTask(task));\n    },\n    onCloseForm: () => {\n      dispatch(action.closeform());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToprops)(TaskForm);","map":{"version":3,"sources":["/Users/vinh-lx/Desktop/redux-tranning/src/components/TaskForm.js"],"names":["React","action","connect","TaskForm","Component","constructor","props","closeForm","onCloseForm","onChange","event","target","name","value","setState","onSubmit","preventDefault","onAddTask","state","onClear","status","id","componentWillMount","task","componentWillReceiveProps","nextProps","render","isDisplayForm","mapStateToProps","tasks","mapDispatchToprops","dispatch","addTask","closeform"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as action from './../actions/index'\nimport { connect } from 'react-redux';\n\nclass TaskForm extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            id : '',\n            name : '',\n            status: false\n        }\n    }\n    componentWillMount(){\n        if(this.props.task){\n             this.setState({\n                 id : this.props.task.id,\n                 name : this.props.task.name,\n                 status : this.props.task.status\n             })\n        }\n    }\n    componentWillReceiveProps(nextProps){\n        if(nextProps && nextProps.task ){\n            this.setState({\n                id: nextProps.task.id,\n                name: nextProps.task.name,\n                status: nextProps.task.status\n            })\n        }else if(nextProps && nextProps.task === null)\n        {\n            this.setState({\n                id : '',\n                name : '',\n                status: false\n            })\n        }\n    }\n    closeForm =() =>{\n        this.props.onCloseForm()\n    }\n    onChange =(event)=>{\n        var target = event.target;\n        var name = target.name;\n        var value = target.value\n        if(name ==='status' ){\n            value = target.value === \"true\" ?  true :  false\n        }\n        this.setState({\n        [name] : value\n        });\n    }\n    onSubmit =(event) =>{\n        event.preventDefault();\n        this.props.onAddTask(this.state);\n         this.onClear();\n         this.closeForm();\n    }\n    onClear =() =>{\n        this.setState({\n            name : '',\n            status: false\n        })\n    }\n    render() {\n        var { id } = this.state;\nif(!this.props.isDisplayForm) return '';\n  return (\n    <div className=\"panel panel-warning\">\n        <div className=\"panel-heading\">\n            <div className=\"panel-title cus-head-left\">\n            { id === null || id ===  '' ?  'Thêm Công Việc' : '\bCập nhật công việc '} \n            </div>   \n            <div \n            className=\"fa fa-times-circle text-right cus-icon-left\" \n            onClick ={this.closeForm }\n            >\n            </div>\n        </div>\n        <div className=\"panel-body\">\n            <form \n            onSubmit={this.onSubmit}\n             >\n                <div className=\"form-group\">\n                    <label>Tên :</label>\n                    <input \n                    type=\"text\" \n                    className=\"form-control\" \n                    name=\"name\" \n                    value = {this.state.name}\n                    onChange = {this.onChange}\n                    />\n                </div>\n                <label>Trạng Thái :</label>\n                <select \n                    className=\"form-control\" \n                    required=\"required\"\n                    name=\"status\" \n                    value = {this.state.status}\n                    onChange = {this.onChange}\n                    >\n                    <option value={true}>Kích Hoạt</option>\n                    <option value={false}>Ẩn</option>\n                </select>\n                <br/>\n                <div className=\"text-center\">\n                    <button type=\"submit\" className=\"btn btn-warning\">Thêm</button>&nbsp;\n                    <button \n                        type=\"button\"\n                        onClick={this.onClear} \n                        className=\"btn btn-danger\">\n                            Hủy Bỏ\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n  );\n}\n}\n\nconst mapStateToProps = state =>{\n    return {\n      tasks : state.tasks,\n      isDisplayForm : state.isDisplayForm\n\n    }\n};\nconst mapDispatchToprops = (dispatch , props) =>{\n    return {\n        onAddTask : (task) =>{\n            dispatch(action.addTask(task)) ;\n        },\n        onCloseForm: () =>{\n            dispatch(action.closeform())\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToprops)(TaskForm);\n\n"]},"metadata":{},"sourceType":"module"}